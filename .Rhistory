}else if(dataname=="Diabetes"){
data("diabetesI")
prelim.data <- diabetesI
prelim.data <- cbind.data.frame(prelim.data[ ,-1],prelim.data[ ,1])
}else if(dataname=="Superconductivity"){
prelim.data <- read.table("data/Superconductivity/train.csv",header = TRUE,sep = ",")
# transforming Y variable with cube root transformation
prelim.data$critical_temp <- prelim.data$critical_temp^(1/3)
}else if(dataname=="Ozone"){
# Data version used in Liang et Al (2008), Miller 2001
data("ozone",package = "gss")
ozone <- ozone[ ,-ncol(ozone)]
original.data <- cbind.data.frame(ozone[ ,-1], ozone[ ,1])
colnames(original.data)[ncol(original.data)] <- "Ozone"
original.data$Ozone <- log(original.data$Ozone)
prelim.data <- data_with_int_quad(original.data)
}else if(dataname=="Boston"){
data("BostonHousing")
original.data <- BostonHousing
prelim.data <- data_with_int_quad(original.data)
}else if(dataname=="Nutrimouse"){
library(mixOmics)
data("nutrimouse")
prelim.data <- cbind(nutrimouse$gene,nutrimouse$lipid$C16.0)
prelim.data <- as.data.frame(prelim.data)
colnames(prelim.data)[ncol(prelim.data)] <- colnames(nutrimouse$lipid)[2]
}else if(dataname=="Multidrug"){
library(mixOmics)
data("multidrug")
x.dirty <- multidrug$compound
x.clean <- x.dirty[ , colSums(is.na(x.dirty))==0]
y <- multidrug$ABC.trans[ ,3]
prelim.data <- cbind(x.clean,y)
prelim.data <- as.data.frame(prelim.data)
}else if(dataname=="NIR"){
library(chemometrics)
data(NIR)
# response is square root of glucose
prelim.data <- cbind(NIR$xNIR,sqrt(NIR$yGlcEtOH$Glucose))
prelim.data <- as.data.frame(prelim.data)
}else if(dataname=="Liver"){
library(mixOmics)
data("liver.toxicity")
prelim.data <- cbind(liver.toxicity$gene, liver.toxicity$clinic$Cholesterol.mg.dL.)
prelim.data <- as.data.frame(prelim.data)
}
# Standardizing all the x's except the factor variables
for (i in 1:(ncol(prelim.data)-1)){
if(is.factor(prelim.data[ ,i])==0){
prelim.data[ ,i]=(prelim.data[ ,i]-mean(prelim.data[ ,i]))/sd(prelim.data[ ,i])
}
}
# centering the Y. Assuming Y is always the last column of prelim.data
y.val.0 <- mean(prelim.data[ , ncol(prelim.data)])
prelim.data[ , ncol(prelim.data)]=prelim.data[ , ncol(prelim.data)]-mean(prelim.data[ , ncol(prelim.data)])
p <- ncol(prelim.data)-1
colnames(prelim.data)[1:p] <- paste("V",1:p,sep="")
colnames(prelim.data)[ncol(prelim.data)]="Y"
#p <- ncol(prelim.data)-1
N <- nrow(prelim.data)
#### NO EDITS BELOW THIS LINE (except RESULTS) ####
datamat <- prelim.data
Xmat=model.matrix(Y~., data = datamat)
p <- ncol(Xmat)-1
Y=datamat[ ,ncol(datamat)]
# For high dimension, add the truncated model prior
EBlocal.mod <- bas.lm(Y~.,datamat, prior = "EB-local",method = "MCMC", MCMC.iterations = 10000)#, modelprior = tr.beta.binomial(1,1,N-2)
EBglobal.mod <- bas.lm(Y~.,datamat, prior = "EB-global",method = "MCMC", MCMC.iterations = 10000)
gsqrtn.mod <- bas.lm(Y~., datamat, prior = "g-prior", alpha = sqrt(N),method = "MCMC", MCMC.iterations = 10000)
hypergprior.mod <- bas.lm(Y~.,datamat, prior = "hyper-g",method = "MCMC", MCMC.iterations = 10000)
lasso.mod <- cv.glmnet(Xmat[ ,-1], Y, family = "gaussian")
coef.mat <- matrix(NA, nrow=p+1, ncol = 5)
colnames(coef.mat) <- c("EBlocal","EBglobal","g=sqrt(n)", "hyper-g","lasso")
coef.mat[ ,1] <- coef(EBlocal.mod)$postmean
coef.mat[ ,2] <- coef(EBglobal.mod)$postmean
coef.mat[ ,3] <- coef(gsqrtn.mod)$postmean
coef.mat[ ,4] <- coef(hypergprior.mod)$postmean
coef.mat[ ,5] <- as.matrix(coef(lasso.mod))
pairs(coef.mat, pch = 19, lower.panel = NULL,panel= function(x,y,...){
points(x,y); abline(a=0, b=1)},main=paste("Pairwise scatter plot for parameter estimates- ",datanames[data.num]))
pip.mat <- matrix(NA, nrow=p+1, ncol = 4)
colnames(pip.mat) <- c("EBlocal","EBglobal","g=sqrt(n)", "hyper-g")
pip.mat[ ,1] <- EBlocal.mod$probne0
pip.mat[ ,2] <- EBglobal.mod$probne0
pip.mat[ ,3] <- gsqrtn.mod$probne0
pip.mat[ ,4] <- hypergprior.mod$probne0
pairs(pip.mat, pch = 19, lower.panel = NULL,panel= function(x,y,...){
points(x,y); abline(a=0, b=1)},main=paste("PIPs for",datanames[data.num]))
data.num <- 13
dataname <- datanames[data.num]
if(dataname=="College"){
data("College")
prelim.data=College
col.num <- ncol(prelim.data)
prelim.data=prelim.data[ , c(1,3:(col.num),2)]
# removed enroll and accept due to causual issues
prelim.data=subset(prelim.data, select=-c(Enroll,Accept))
prelim.data$Apps=log(prelim.data$Apps)
prelim.data$F.Undergrad=log(prelim.data$F.Undergrad)
prelim.data$P.Undergrad=log(prelim.data$P.Undergrad)
}else if(dataname=="BC-Tmax"){
prelim.data <- read.table("data/BiasCorrection/Bias_correction_ucl.csv",header = TRUE,sep = ",")
colnum <- ncol(prelim.data)
prelim.data <- prelim.data[ , -c(1:2,colnum)]
prelim.data <- prelim.data[complete.cases(prelim.data),]
prelim.data[ , ncol(prelim.data)] <- sqrt(prelim.data[ , ncol(prelim.data)] )
}else if(dataname=="BC-Tmin"){
prelim.data <- read.table("data/BiasCorrection/Bias_correction_ucl.csv",header = TRUE,sep = ",")
colnum <- ncol(prelim.data)
prelim.data <- prelim.data[ , -c(1:2,colnum-1)]
prelim.data <- prelim.data[complete.cases(prelim.data),]
prelim.data[ , ncol(prelim.data)] <- sqrt(prelim.data[ , ncol(prelim.data)] )
}else if(dataname=="BS-daily"){
prelim.data=read.table("data/bikesharing/day.csv",header = TRUE,sep = ",")
# remove date and record index since these variables are just indexing variables
# remove casual and registered since they define the outcome variable of interest
prelim.data=prelim.data[ ,-c(1,2,14,15)]
# Changing normalised versions to actual numbers based on the read me file
prelim.data$temp <- prelim.data$temp*41
prelim.data$atemp <- prelim.data$atemp*50
prelim.data$windspeed <- prelim.data$windspeed*67
prelim.data$hum <- prelim.data$hum*100
prelim.data$yr <- factor(format(prelim.data$yr, format="%A"),
levels = c("0", "1") , labels = c("2011","2012"))
prelim.data$weathersit <- factor(format(prelim.data$weathersit, format="%A"),
levels = c("1", "2","3") ,
labels = c("Good","Moderate","Bad"))
prelim.data$holiday <- factor(format(prelim.data$holiday, format="%A"),
levels = c("0", "1") , labels = c("NotHoliDay","Holiday"))
prelim.data$season <- factor(format(prelim.data$season, format="%A"),
levels = c("1", "2","3","4") , labels = c("Spring","Summer","Fall","Winter"))
prelim.data$mnth <- factor(prelim.data$mnth)
prelim.data$mnth <- relevel(prelim.data$mnth,ref=6)
prelim.data$weekday <- factor(prelim.data$weekday)
prelim.data$weekday <- relevel(prelim.data$weekday,ref=3)
prelim.data=subset(prelim.data,select = -c(workingday))
prelim.data$cnt=(prelim.data$cnt)^(1/2)
}else if(dataname=="BS-hourly"){
prelim.data=read.table("data/bikesharing/hour.csv",header = TRUE,sep = ",")
# remove date and record index since these variables are just indexing variables
# remove casual and registered since they define the outcome variable of interest
prelim.data=prelim.data[ ,-c(1,2,15,16)]
# Changing normalised versions to actual numbers based on the read me file
prelim.data$temp <- prelim.data$temp*41
prelim.data$atemp <- prelim.data$atemp*50
prelim.data$windspeed <- prelim.data$windspeed*67
prelim.data$hum <- prelim.data$hum*100
prelim.data$yr <- factor(format(prelim.data$yr, format="%A"),
levels = c("0", "1") , labels = c("2011","2012"))
prelim.data$weathersit <- factor(format(prelim.data$weathersit, format="%A"),
levels = c("1", "2","3","4") ,
labels = c("Good","Moderate","Bad","Bad"))
prelim.data$holiday <- factor(format(prelim.data$holiday, format="%A"),
levels = c("0", "1") , labels = c("NotHoliDay","Holiday"))
prelim.data$season <- factor(format(prelim.data$season, format="%A"),
levels = c("1", "2","3","4") , labels = c("Spring","Summer","Fall","Winter"))
prelim.data$hr[prelim.data$hr %in% 0:5] <- "LateNight"
prelim.data$hr[prelim.data$hr %in% 6:8] <- "EarlyMorning"
prelim.data$hr[prelim.data$hr %in% 9:15] <- "Morning"
prelim.data$hr[prelim.data$hr %in% 16:18] <- "Evening"
prelim.data$hr[prelim.data$hr %in% 19:23] <- "Night"
prelim.data$hr <- as.factor(prelim.data$hr)
prelim.data$hr <- relevel(prelim.data$hr,ref="Morning")
# Cube root tranformation of dependent variable, season: ref=summer
# month: ref=may, weekday:ref=wednesday, hr:ref=Morning
prelim.data$season <- relevel(prelim.data$season,ref=2)
prelim.data$mnth <- factor(prelim.data$mnth)
prelim.data$mnth <- relevel(prelim.data$mnth,ref=5)
prelim.data$weekday <- factor(prelim.data$weekday)
prelim.data$weekday <- relevel(prelim.data$weekday,ref=3)
prelim.data=subset(prelim.data,select = -c(workingday))
prelim.data$cnt=(prelim.data$cnt)^(1/3)
}else if(dataname=="SML"){
prelim.data <- read.table("data/SML2010/NEW-DATA-2.T15.txt",header = TRUE,sep = " ")
prelim.data <- prelim.data[ , -c(1:2,19:21)]
colnum <- ncol(prelim.data)
prelim.data <- prelim.data[ , c(3:colnum,1)]
prelim.data$X24.Day_Of_Week <- round(prelim.data$X24.Day_Of_Week,digits = 0)
prelim.data$X24.Day_Of_Week <- factor(prelim.data$X24.Day_Of_Week)
}else if(dataname=="Diabetes"){
data("diabetesI")
prelim.data <- diabetesI
prelim.data <- cbind.data.frame(prelim.data[ ,-1],prelim.data[ ,1])
}else if(dataname=="Superconductivity"){
prelim.data <- read.table("data/Superconductivity/train.csv",header = TRUE,sep = ",")
# transforming Y variable with cube root transformation
prelim.data$critical_temp <- prelim.data$critical_temp^(1/3)
}else if(dataname=="Ozone"){
# Data version used in Liang et Al (2008), Miller 2001
data("ozone",package = "gss")
ozone <- ozone[ ,-ncol(ozone)]
original.data <- cbind.data.frame(ozone[ ,-1], ozone[ ,1])
colnames(original.data)[ncol(original.data)] <- "Ozone"
original.data$Ozone <- log(original.data$Ozone)
prelim.data <- data_with_int_quad(original.data)
}else if(dataname=="Boston"){
data("BostonHousing")
original.data <- BostonHousing
prelim.data <- data_with_int_quad(original.data)
}else if(dataname=="Nutrimouse"){
library(mixOmics)
data("nutrimouse")
prelim.data <- cbind(nutrimouse$gene,nutrimouse$lipid$C16.0)
prelim.data <- as.data.frame(prelim.data)
colnames(prelim.data)[ncol(prelim.data)] <- colnames(nutrimouse$lipid)[2]
}else if(dataname=="Multidrug"){
library(mixOmics)
data("multidrug")
x.dirty <- multidrug$compound
x.clean <- x.dirty[ , colSums(is.na(x.dirty))==0]
y <- multidrug$ABC.trans[ ,3]
prelim.data <- cbind(x.clean,y)
prelim.data <- as.data.frame(prelim.data)
}else if(dataname=="NIR"){
library(chemometrics)
data(NIR)
# response is square root of glucose
prelim.data <- cbind(NIR$xNIR,sqrt(NIR$yGlcEtOH$Glucose))
prelim.data <- as.data.frame(prelim.data)
}else if(dataname=="Liver"){
library(mixOmics)
data("liver.toxicity")
prelim.data <- cbind(liver.toxicity$gene, liver.toxicity$clinic$Cholesterol.mg.dL.)
prelim.data <- as.data.frame(prelim.data)
}
# Standardizing all the x's except the factor variables
for (i in 1:(ncol(prelim.data)-1)){
if(is.factor(prelim.data[ ,i])==0){
prelim.data[ ,i]=(prelim.data[ ,i]-mean(prelim.data[ ,i]))/sd(prelim.data[ ,i])
}
}
# centering the Y. Assuming Y is always the last column of prelim.data
y.val.0 <- mean(prelim.data[ , ncol(prelim.data)])
prelim.data[ , ncol(prelim.data)]=prelim.data[ , ncol(prelim.data)]-mean(prelim.data[ , ncol(prelim.data)])
p <- ncol(prelim.data)-1
colnames(prelim.data)[1:p] <- paste("V",1:p,sep="")
colnames(prelim.data)[ncol(prelim.data)]="Y"
#p <- ncol(prelim.data)-1
N <- nrow(prelim.data)
#### NO EDITS BELOW THIS LINE (except RESULTS) ####
datamat <- prelim.data
Xmat=model.matrix(Y~., data = datamat)
p <- ncol(Xmat)-1
Y=datamat[ ,ncol(datamat)]
# For high dimension, add the truncated model prior
EBlocal.mod <- bas.lm(Y~.,datamat, prior = "EB-local",method = "MCMC", MCMC.iterations = 10000)#, modelprior = tr.beta.binomial(1,1,N-2)
EBglobal.mod <- bas.lm(Y~.,datamat, prior = "EB-global",method = "MCMC", MCMC.iterations = 10000)
gsqrtn.mod <- bas.lm(Y~., datamat, prior = "g-prior", alpha = sqrt(N),method = "MCMC", MCMC.iterations = 10000)
hypergprior.mod <- bas.lm(Y~.,datamat, prior = "hyper-g",method = "MCMC", MCMC.iterations = 10000)
lasso.mod <- cv.glmnet(Xmat[ ,-1], Y, family = "gaussian")
coef.mat <- matrix(NA, nrow=p+1, ncol = 5)
colnames(coef.mat) <- c("EBlocal","EBglobal","g=sqrt(n)", "hyper-g","lasso")
coef.mat[ ,1] <- coef(EBlocal.mod)$postmean
coef.mat[ ,2] <- coef(EBglobal.mod)$postmean
coef.mat[ ,3] <- coef(gsqrtn.mod)$postmean
coef.mat[ ,4] <- coef(hypergprior.mod)$postmean
coef.mat[ ,5] <- as.matrix(coef(lasso.mod))
pairs(coef.mat, pch = 19, lower.panel = NULL,panel= function(x,y,...){
points(x,y); abline(a=0, b=1)},main=paste("Pairwise scatter plot for parameter estimates- ",datanames[data.num]))
pip.mat <- matrix(NA, nrow=p+1, ncol = 4)
colnames(pip.mat) <- c("EBlocal","EBglobal","g=sqrt(n)", "hyper-g")
pip.mat[ ,1] <- EBlocal.mod$probne0
pip.mat[ ,2] <- EBglobal.mod$probne0
pip.mat[ ,3] <- gsqrtn.mod$probne0
pip.mat[ ,4] <- hypergprior.mod$probne0
pairs(pip.mat, pch = 19, lower.panel = NULL,panel= function(x,y,...){
points(x,y); abline(a=0, b=1)},main=paste("PIPs for",datanames[data.num]))
cor(coef.mat)
data.num <- 11
dataname <- datanames[data.num]
if(dataname=="College"){
data("College")
prelim.data=College
col.num <- ncol(prelim.data)
prelim.data=prelim.data[ , c(1,3:(col.num),2)]
# removed enroll and accept due to causual issues
prelim.data=subset(prelim.data, select=-c(Enroll,Accept))
prelim.data$Apps=log(prelim.data$Apps)
prelim.data$F.Undergrad=log(prelim.data$F.Undergrad)
prelim.data$P.Undergrad=log(prelim.data$P.Undergrad)
}else if(dataname=="BC-Tmax"){
prelim.data <- read.table("data/BiasCorrection/Bias_correction_ucl.csv",header = TRUE,sep = ",")
colnum <- ncol(prelim.data)
prelim.data <- prelim.data[ , -c(1:2,colnum)]
prelim.data <- prelim.data[complete.cases(prelim.data),]
prelim.data[ , ncol(prelim.data)] <- sqrt(prelim.data[ , ncol(prelim.data)] )
}else if(dataname=="BC-Tmin"){
prelim.data <- read.table("data/BiasCorrection/Bias_correction_ucl.csv",header = TRUE,sep = ",")
colnum <- ncol(prelim.data)
prelim.data <- prelim.data[ , -c(1:2,colnum-1)]
prelim.data <- prelim.data[complete.cases(prelim.data),]
prelim.data[ , ncol(prelim.data)] <- sqrt(prelim.data[ , ncol(prelim.data)] )
}else if(dataname=="BS-daily"){
prelim.data=read.table("data/bikesharing/day.csv",header = TRUE,sep = ",")
# remove date and record index since these variables are just indexing variables
# remove casual and registered since they define the outcome variable of interest
prelim.data=prelim.data[ ,-c(1,2,14,15)]
# Changing normalised versions to actual numbers based on the read me file
prelim.data$temp <- prelim.data$temp*41
prelim.data$atemp <- prelim.data$atemp*50
prelim.data$windspeed <- prelim.data$windspeed*67
prelim.data$hum <- prelim.data$hum*100
prelim.data$yr <- factor(format(prelim.data$yr, format="%A"),
levels = c("0", "1") , labels = c("2011","2012"))
prelim.data$weathersit <- factor(format(prelim.data$weathersit, format="%A"),
levels = c("1", "2","3") ,
labels = c("Good","Moderate","Bad"))
prelim.data$holiday <- factor(format(prelim.data$holiday, format="%A"),
levels = c("0", "1") , labels = c("NotHoliDay","Holiday"))
prelim.data$season <- factor(format(prelim.data$season, format="%A"),
levels = c("1", "2","3","4") , labels = c("Spring","Summer","Fall","Winter"))
prelim.data$mnth <- factor(prelim.data$mnth)
prelim.data$mnth <- relevel(prelim.data$mnth,ref=6)
prelim.data$weekday <- factor(prelim.data$weekday)
prelim.data$weekday <- relevel(prelim.data$weekday,ref=3)
prelim.data=subset(prelim.data,select = -c(workingday))
prelim.data$cnt=(prelim.data$cnt)^(1/2)
}else if(dataname=="BS-hourly"){
prelim.data=read.table("data/bikesharing/hour.csv",header = TRUE,sep = ",")
# remove date and record index since these variables are just indexing variables
# remove casual and registered since they define the outcome variable of interest
prelim.data=prelim.data[ ,-c(1,2,15,16)]
# Changing normalised versions to actual numbers based on the read me file
prelim.data$temp <- prelim.data$temp*41
prelim.data$atemp <- prelim.data$atemp*50
prelim.data$windspeed <- prelim.data$windspeed*67
prelim.data$hum <- prelim.data$hum*100
prelim.data$yr <- factor(format(prelim.data$yr, format="%A"),
levels = c("0", "1") , labels = c("2011","2012"))
prelim.data$weathersit <- factor(format(prelim.data$weathersit, format="%A"),
levels = c("1", "2","3","4") ,
labels = c("Good","Moderate","Bad","Bad"))
prelim.data$holiday <- factor(format(prelim.data$holiday, format="%A"),
levels = c("0", "1") , labels = c("NotHoliDay","Holiday"))
prelim.data$season <- factor(format(prelim.data$season, format="%A"),
levels = c("1", "2","3","4") , labels = c("Spring","Summer","Fall","Winter"))
prelim.data$hr[prelim.data$hr %in% 0:5] <- "LateNight"
prelim.data$hr[prelim.data$hr %in% 6:8] <- "EarlyMorning"
prelim.data$hr[prelim.data$hr %in% 9:15] <- "Morning"
prelim.data$hr[prelim.data$hr %in% 16:18] <- "Evening"
prelim.data$hr[prelim.data$hr %in% 19:23] <- "Night"
prelim.data$hr <- as.factor(prelim.data$hr)
prelim.data$hr <- relevel(prelim.data$hr,ref="Morning")
# Cube root tranformation of dependent variable, season: ref=summer
# month: ref=may, weekday:ref=wednesday, hr:ref=Morning
prelim.data$season <- relevel(prelim.data$season,ref=2)
prelim.data$mnth <- factor(prelim.data$mnth)
prelim.data$mnth <- relevel(prelim.data$mnth,ref=5)
prelim.data$weekday <- factor(prelim.data$weekday)
prelim.data$weekday <- relevel(prelim.data$weekday,ref=3)
prelim.data=subset(prelim.data,select = -c(workingday))
prelim.data$cnt=(prelim.data$cnt)^(1/3)
}else if(dataname=="SML"){
prelim.data <- read.table("data/SML2010/NEW-DATA-2.T15.txt",header = TRUE,sep = " ")
prelim.data <- prelim.data[ , -c(1:2,19:21)]
colnum <- ncol(prelim.data)
prelim.data <- prelim.data[ , c(3:colnum,1)]
prelim.data$X24.Day_Of_Week <- round(prelim.data$X24.Day_Of_Week,digits = 0)
prelim.data$X24.Day_Of_Week <- factor(prelim.data$X24.Day_Of_Week)
}else if(dataname=="Diabetes"){
data("diabetesI")
prelim.data <- diabetesI
prelim.data <- cbind.data.frame(prelim.data[ ,-1],prelim.data[ ,1])
}else if(dataname=="Superconductivity"){
prelim.data <- read.table("data/Superconductivity/train.csv",header = TRUE,sep = ",")
# transforming Y variable with cube root transformation
prelim.data$critical_temp <- prelim.data$critical_temp^(1/3)
}else if(dataname=="Ozone"){
# Data version used in Liang et Al (2008), Miller 2001
data("ozone",package = "gss")
ozone <- ozone[ ,-ncol(ozone)]
original.data <- cbind.data.frame(ozone[ ,-1], ozone[ ,1])
colnames(original.data)[ncol(original.data)] <- "Ozone"
original.data$Ozone <- log(original.data$Ozone)
prelim.data <- data_with_int_quad(original.data)
}else if(dataname=="Boston"){
data("BostonHousing")
original.data <- BostonHousing
prelim.data <- data_with_int_quad(original.data)
}else if(dataname=="Nutrimouse"){
library(mixOmics)
data("nutrimouse")
prelim.data <- cbind(nutrimouse$gene,nutrimouse$lipid$C16.0)
prelim.data <- as.data.frame(prelim.data)
colnames(prelim.data)[ncol(prelim.data)] <- colnames(nutrimouse$lipid)[2]
}else if(dataname=="Multidrug"){
library(mixOmics)
data("multidrug")
x.dirty <- multidrug$compound
x.clean <- x.dirty[ , colSums(is.na(x.dirty))==0]
y <- multidrug$ABC.trans[ ,3]
prelim.data <- cbind(x.clean,y)
prelim.data <- as.data.frame(prelim.data)
}else if(dataname=="NIR"){
library(chemometrics)
data(NIR)
# response is square root of glucose
prelim.data <- cbind(NIR$xNIR,sqrt(NIR$yGlcEtOH$Glucose))
prelim.data <- as.data.frame(prelim.data)
}else if(dataname=="Liver"){
library(mixOmics)
data("liver.toxicity")
prelim.data <- cbind(liver.toxicity$gene, liver.toxicity$clinic$Cholesterol.mg.dL.)
prelim.data <- as.data.frame(prelim.data)
}
# Standardizing all the x's except the factor variables
for (i in 1:(ncol(prelim.data)-1)){
if(is.factor(prelim.data[ ,i])==0){
prelim.data[ ,i]=(prelim.data[ ,i]-mean(prelim.data[ ,i]))/sd(prelim.data[ ,i])
}
}
# centering the Y. Assuming Y is always the last column of prelim.data
y.val.0 <- mean(prelim.data[ , ncol(prelim.data)])
prelim.data[ , ncol(prelim.data)]=prelim.data[ , ncol(prelim.data)]-mean(prelim.data[ , ncol(prelim.data)])
p <- ncol(prelim.data)-1
colnames(prelim.data)[1:p] <- paste("V",1:p,sep="")
colnames(prelim.data)[ncol(prelim.data)]="Y"
#p <- ncol(prelim.data)-1
N <- nrow(prelim.data)
#### NO EDITS BELOW THIS LINE (except RESULTS) ####
datamat <- prelim.data
Xmat=model.matrix(Y~., data = datamat)
p <- ncol(Xmat)-1
Y=datamat[ ,ncol(datamat)]
# For high dimension, add the truncated model prior
EBlocal.mod <- bas.lm(Y~.,datamat, prior = "EB-local",method = "MCMC", MCMC.iterations = 10000)#, modelprior = tr.beta.binomial(1,1,N-2)
EBglobal.mod <- bas.lm(Y~.,datamat, prior = "EB-global",method = "MCMC", MCMC.iterations = 10000)
gsqrtn.mod <- bas.lm(Y~., datamat, prior = "g-prior", alpha = sqrt(N),method = "MCMC", MCMC.iterations = 10000)
hypergprior.mod <- bas.lm(Y~.,datamat, prior = "hyper-g",method = "MCMC", MCMC.iterations = 10000)
lasso.mod <- cv.glmnet(Xmat[ ,-1], Y, family = "gaussian")
coef.mat <- matrix(NA, nrow=p+1, ncol = 5)
colnames(coef.mat) <- c("EBlocal","EBglobal","g=sqrt(n)", "hyper-g","lasso")
coef.mat[ ,1] <- coef(EBlocal.mod)$postmean
coef.mat[ ,2] <- coef(EBglobal.mod)$postmean
coef.mat[ ,3] <- coef(gsqrtn.mod)$postmean
coef.mat[ ,4] <- coef(hypergprior.mod)$postmean
coef.mat[ ,5] <- as.matrix(coef(lasso.mod))
pairs(coef.mat, pch = 19, lower.panel = NULL,panel= function(x,y,...){
points(x,y); abline(a=0, b=1)},main=paste("Pairwise scatter plot for parameter estimates- ",datanames[data.num]))
pip.mat <- matrix(NA, nrow=p+1, ncol = 4)
colnames(pip.mat) <- c("EBlocal","EBglobal","g=sqrt(n)", "hyper-g")
pip.mat[ ,1] <- EBlocal.mod$probne0
pip.mat[ ,2] <- EBglobal.mod$probne0
pip.mat[ ,3] <- gsqrtn.mod$probne0
pip.mat[ ,4] <- hypergprior.mod$probne0
pairs(pip.mat, pch = 19, lower.panel = NULL,panel= function(x,y,...){
points(x,y); abline(a=0, b=1)},main=paste("PIPs for",datanames[data.num]))
View(EBlocal.mod)
cor(coef.mat)
setwd("C:/Users/Anupreet Porwal/Dropbox/Research/BMA LASSO/code/BMA code")
datanames <- c("College", "BC-Tmax", "BC-Tmin", "BS-daily",
"BS-hourly","SML","Diabetes", "Superconductivity", "Ozone", "Boston",
"Nutrimouse","Multidrug","NIR","Liver")
dat.dim <- matrix(NA, nrow=length(datanames),ncol = 4)
rownames(dat.dim) <- datanames
colnames(dat.dim) <- c("n","p","p0","R2")
dat.dim[1, ] <- c(777,14,7,0.8659)
dat.dim[2, ] <- c(7590,21,17,0.7809)
dat.dim[3, ] <- c(7590,21,20,0.8375)
dat.dim[4, ] <- c(731,28,16,0.8439)
dat.dim[5, ] <- c(17379,32,21,0.7238)
dat.dim[6, ] <- c(1373,22,16,0.9306)
dat.dim[7, ] <- c(442,64,7,0.5171)
dat.dim[8, ] <- c(21263,81,27,0.7216)
dat.dim[9, ] <- c(330,44,5,0.7489)
dat.dim[10, ] <- c(506,103,23,0.8621)
dat.dim[11, ] <- c(40,120,9,0.9447)
dat.dim[12, ] <- c(60,853,12,0.8490)
dat.dim[13, ] <- c(166,225,7,0.8648)
dat.dim[14, ] <- c(64,3116,8,0.844)
dataname <- c("College", "BC-Tmax", "BC-Tmin", "BS-daily","BS-hourly","SML","Diabetes","Superconductivity",
"Ozone", "Boston", "Nutrimouse","Multidrug","NIR","Liver")
dates_pred <- rep("01142021", length(dataname))
dates_pred[5] <- "01202021"
dates_pred[8] <- "01232021"
resultsFile = paste("results/011421/", paste0(dataname,"_","prediction","_",
dates_pred),sep = "")
filename <- paste(resultsFile,"rda",sep = ".")
methods_Point=c("BMA-bicreg","Spikeslab","UIP", "BIC ","AIC","EB-local","EB-global",
"g-sqrtn","g-1","Hyper g","NLP","Horseshoe","SS Lasso", "EMVS", "SCAD",
"MCP","LASSO-lambda.min","LASSO-lambda.1se","Elastic Net","JZS","ZS-null","full model")# ,"ScanBMA")
methods_Interval=c("BMA-bicreg","Spikeslab","UIP", "BIC ","AIC","EB-local","EB-global",
"g-sqrtn","g-1","Hyper g","NLP","Horseshoe","JZS","ZS-null","full model")# ,"ScanBMA")
R2.res <- matrix(NA, length(methods_Point),length(dataname))
rownames(R2.res) <- methods_Point
colnames(R2.res) <- dataname
phat.res <- matrix(NA, length(methods_Point),length(dataname))
rownames(phat.res) <- methods_Point
colnames(phat.res) <- dataname
Coverage.res <- matrix(NA, length(methods_Interval),length(dataname))
rownames(Coverage.res) <- methods_Interval
colnames(Coverage.res) <- dataname
MIS.res <- matrix(NA, length(methods_Interval),length(dataname))
rownames(MIS.res) <- methods_Interval
colnames(MIS.res) <- dataname
Width.res <- matrix(NA, length(methods_Interval),length(dataname))
rownames(Width.res) <- methods_Interval
colnames(Width.res) <- dataname
CRPS.res <- matrix(NA, length(methods_Interval),length(dataname))
rownames(CRPS.res) <- methods_Interval
colnames(CRPS.res) <- dataname
for (i in 1:length(filename)){
load(file=filename[i])
R2.res[ ,i] <- res1$point.pred.metric[ ,4]
phat.res[ ,i] <- res1$point.pred.metric[ ,5]
Coverage.res[ ,i] <- res1$uncertainty.pred.metric[ ,1]
Width.res[ ,i] <- res1$uncertainty.pred.metric[ ,2]
MIS.res[ ,i] <- res1$uncertainty.pred.metric[ ,3]
CRPS.res[ ,i] <- res1$uncertainty.pred.metric[ ,4]
}
View(res1)
View(Coverage.res)
